import json
import imagehash
import requests
from PIL import Image
from io import BytesIO

FICHIER_JSON = r"C:\Users\Chabot\Desktop\NSI\Trophee NSI\crawler.json"

def charger_hashes():
    """Charge la base de donn√©es des hashes depuis le fichier JSON."""
    try:
        with open(FICHIER_JSON, "r", encoding="utf-8") as f:
            return json.load(f)
    except (json.JSONDecodeError, FileNotFoundError):
        return []

def phash_image(image):
    """Calcule le hash perceptuel de l'image."""
    return str(imagehash.average_hash(image))

def rechercher_image(image_path):
    """Recherche une image locale dans la base de donn√©es et retourne ses informations si elle est trouv√©e."""
    base_hashes = charger_hashes()
    if not base_hashes:
        print("üö® Aucune base de donn√©es d'images d'art trouv√©e.")
        return None

    img = Image.open(image_path).convert("RGB")
    new_hash = phash_image(img)

    for h in base_hashes:
        hash_image = imagehash.hex_to_hash(h["hash"])
        if hash_image == imagehash.hex_to_hash(new_hash):
            print(f"‚úÖ Image trouv√©e pour le hash : {new_hash}")
            return h

    print("‚ùå Aucune correspondance trouv√©e.")
    return None

def rechercher_image_url(image_url):
    """T√©l√©charge l'image depuis une URL, calcule son hash et la recherche dans la base de donn√©es."""
    try:
        response = requests.get(image_url, timeout=5)
        if response.status_code != 200:
            print("‚ùå Impossible de r√©cup√©rer l'image depuis l'URL.")
            return None

        img = Image.open(BytesIO(response.content)).convert("RGB")
        return rechercher_image_pil(img)

    except Exception as e:
        print(f"‚ùå Erreur lors de la r√©cup√©ration de l'image : {e}")
        return None

def rechercher_image_pil(image):
    """Recherche une image PIL dans la base de donn√©es et retourne ses informations si elle est trouv√©e."""
    base_hashes = charger_hashes()
    if not base_hashes:
        print("üö® Aucune base de donn√©es d'images d'art trouv√©e.")
        return None

    new_hash = phash_image(image)

    for h in base_hashes:
        hash_image = imagehash.hex_to_hash(h["hash"])
        if hash_image == imagehash.hex_to_hash(new_hash):
            print(f"‚úÖ Image trouv√©e pour le hash : {new_hash}")
            return h

    print("‚ùå Aucune correspondance trouv√©e.")
    return None

image_test = r"C:\Users\Chabot\Desktop\NSI\Trophee NSI\c.jpg"
resultat = rechercher_image(image_test)
if resultat:
    print(f"üñºÔ∏è Infos de l'≈ìuvre trouv√©e : {resultat}")

image_test_url = ""
# resultat_url = rechercher_image_url(image_test_url)
# if resultat_url:
#    print(f"üñºÔ∏è Infos de l'≈ìuvre trouv√©e depuis l'URL : {resultat_url}")
